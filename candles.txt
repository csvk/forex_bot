### ---- run_api_tests.py ----- ###

from dateutil.parser import parse

print(api.get_candles_df(pair_name="EURUSD", count=-10, granularity="H1"))
print(api.get_candles_df(pair_name="EURUSD", count=10, granularity="H1", date_f=parse("2021-01-10T00:00:00")))
print(api.last_complete_candle(pair_name="EURUSD", granularity="H1"))

### ---- openfx_api.py ----- ###


def fetch_candles(self, pair_name, count=-10, granularity="H1", ts_f=None):

    if ts_f is None:
        ts_f = int(pd.Timestamp(dt.datetime.utcnow()).timestamp() * 1000)
        
    params = dict(
        timestamp=ts_f,
        count=count
    )

    if count < 0:
        params['count']=count+1

    base_url = f"quotehistory/{pair_name}/{granularity}/bars/"

    ok_bid, bid_data = self.make_request(base_url+"bid", params=params, save_filename="bids")
    ok_ask, ask_data = self.make_request(base_url+"ask", params=params, save_filename="asks")

    if ok_ask == True and ok_bid == True:
        return True, [ask_data, bid_data]
    
    return False, None


def get_price_dict(self, price_label: str, item):
    data = dict(time=pd.to_datetime(item['Timestamp'], unit='ms'))
    for ohlc in LABEL_MAP.keys():
        data[f"{price_label}_{LABEL_MAP[ohlc]}"]=item[ohlc]
    return data


def get_candles_df(self, pair_name, count=-10, granularity="H1", date_f=None):

    if date_f is not None:
        date_f = int(pd.Timestamp(date_f).timestamp() * 1000)

    ok, data = self.fetch_candles(pair_name, count=count, granularity=granularity, ts_f=date_f)

    if ok == False:
        return None
    
    data_ask, data_bid = data

    if (data_ask is None) or (data_bid is None):
        return None
    
    if ("Bars" in data_ask == False) or ("Bars" in data_bid == False):
        return pd.DataFrame()
    
    ask_bars = data_ask["Bars"]
    bid_bars = data_bid["Bars"]

    if len(ask_bars) == 0 or len(bid_bars) == 0:
        return pd.DataFrame()

    AvailableTo = pd.to_datetime(data_bid['AvailableTo'], unit='ms')

    bids = [self.get_price_dict('bid', item) for item in bid_bars]
    asks = [self.get_price_dict('ask', item) for item in ask_bars]

    df_bid = pd.DataFrame.from_dict(bids)
    df_ask = pd.DataFrame.from_dict(asks)
    df_merged = pd.merge(left=df_bid, right=df_ask, on='time')    

    for i in ['_o', '_h', '_l', '_c']:
        df_merged[f'mid{i}'] = (df_merged[f'ask{i}'] - df_merged[f'bid{i}']) / 2 + df_merged[f'bid{i}']      

    if count < 0 and df_merged.shape[0] > 0 and df_merged.iloc[-1].time == AvailableTo:
        df_merged = df_merged[:-1]  

    return df_merged


def last_complete_candle(self, pair_name, granularity):
    df = self.get_candles_df(pair_name, granularity=granularity)
    if df.shape[0] == 0:
        return None
    return df.iloc[-1].time
    
